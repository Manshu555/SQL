CREATE DATABASE COLLEGE;
CREATE DATABASE IF NOT EXISTS COLLEGE;

DROP DATABASE IF EXISTS COMPANY;

USE COLLEGE;

CREATE TABLE STUDENT (
	ID INT PRIMARY KEY,
    NAME varchar(50),
    age INT NOT NULL
);

INSERT INTO STUDENT VALUES(1,"MANSHU",20);
INSERT INTO STUDENT VALUES(2,"Avan",19);
INSERT INTO STUDENT VALUES(3,"Nikhil",17);
INSERT INTO STUDENT(NAME,AGE,ID) VALUES ("DEEPIKA",19,4);

SELECT * FROM STUDENT;

SHOW DATABASES;
SHOW TABLES;










CREATE DATABASE XYZ;
USE XYZ;
CREATE TABLE INFO(
	ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    SALARY INT
);

INSERT INTO INFO VALUES (1,"ADAM",25000);
INSERT INTO INFO VALUES (2,"BOB",30000);
INSERT INTO INFO VALUES (3,"CASEY",40000);

SELECT * FROM INFO;
USE COLLEGE;
CREATE TABLE TEMP1(
	ID INT,
    NAME VARCHAR(50),
    CITY VARCHAR(20),
    AGE INT,
    PRIMARY KEY(ID,NAME)
);

INSERT INTO TEMP1 VALUES (101,"AVAN","MUNGELI",20);
INSERT INTO TEMP1(ID,NAME) VALUES (102,"NIKHIL");
SELECT * FROM TEMP1;

USE XYZ;

CREATE TABLE EMPLOYEE(
	ID INT PRIMARY KEY,
    SALARY INT DEFAULT 25000,
    NAME VARCHAR(50)
);

INSERT INTO EMPLOYEE(ID,NAME) VALUES(101,"MANSHU");
INSERT INTO EMPLOYEE(ID,NAME) VALUES(102,"NIKHIL");
INSERT INTO EMPLOYEE(ID,NAME,SALARY) VALUES(103,"DEEPIKA",35000);

SELECT * FROM EMPLOYEE;

USE XYZ;



CREATE TABLE student ( 
rollno INT PRIMARY KEY, 
name VARCHAR(50), 
marks INT NOT NULL, 
grade VARCHAR(1), 
city VARCHAR(20)
);



INSERT INTO STUDENT
(rollno, name, marks, grade, city) VALUES
(101, "anil", 78, "C", "Pune"),
(102, "bhumika", 93, "A", "Mumbai"),
(103, "chetan", 85, "B", "Mumbai"),
(104, "dhruv", 96, "A", "Delhi"),
(105, "emanuel", 12, "F", "Delhi"),
(106, "farah", 82, "B", "Delhi");

SELECT ROLLNO,NAME FROM STUDENT;
SELECT DISTINCT city FROM STUDENT;
SELECT * FROM STUDENT WHERE MARKS>80 AND CITY = "MUMBAI";
SELECT * FROM STUDENT WHERE MARKS BETWEEN 80 AND 90;
SELECT * FROM STUDENT WHERE CITY IN ("DELHI","MUMBAI","BILASPUR");

SELECT *
FROM STUDENT
LIMIT 3; -- IT WILL SHOW ONLY 3 RESULTS 

SELECT *
FROM STUDENT
ORDER BY marks DESC -- ASC
LIMIT 3;

SELECT COUNT(marks)
FROM STUDENT;

SELECT MAX(marks)
FROM STUDENT;

SELECT city,COUNT(NAME) 
FROM STUDENT
GROUP BY city;

SELECT grade,COUNT(name) -- COUNT(rollno)
FROM STUDENT
GROUP BY GRADE
ORDER BY GRADE; -- IMP STATEMENT TO UNDERSTAND 1:43:10

SELECT city,COUNT(city)
FROM STUDENT
GROUP BY city
HAVING MAX(marks) > 90 ;

SELECT city
FROM STUDENT
WHERE grade = "A"
GROUP BY city
HAVING MAX(marks)>=93
ORDER BY city DESC;


SET SQL_SAFE_UPDATES = 0;
UPDATE student
SET grade = "O"
WHERE grade = "A";

SELECT * FROM STUDENT;

DELETE FROM STUDENT
WHERE MARKS<33;

USE XYZ;
CREATE TABLE infoS(
	ID INT
);

INSERT INTO INFOS VALUES (14);
INSERT INTO INFOS VALUES (15);
INSERT INTO INFOS VALUES (16);
INSERT INTO INFOS VALUES (17);

SELECT * FROM INFOS;
DELETE FROM INFOS;

-- Fk
USE college;
CREATE TABLE dept( -- PARENT TABLE
	id INT PRIMARY KEY,
    name VARCHAR(50)
);
-- THEY BOTH ARE LINKED WITH fk(FOREIGN KEY)
CREATE TABLE teacher( -- CHILD TABLE
	id INT,
    name VARCHAR(50),
    dept_id int,
    foreign key (dept_id) references dept(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

DROP TABLE teacher;

INSERT INTO dept VALUES
(101,"ENGLISH"),
(102,"IT");

INSERT INTO teacher VALUES
(101,"MANSHU",102),
(102,"NIKHIL",101);

SELECT * FROM TEACHER;

UPDATE DEPT
SET ID = 103
WHERE ID  = 102;



-- ALTER

ALTER TABLE student
ADD SEX VARCHAR(1);

SELECT * FROM STUDENT;

ALTER TABLE student
DROP SEX;

ALTER TABLE STUDENT
ADD stu_age INT NOT NULL DEFAULT 19;

ALTER TABLE STUDENT
MODIFY stu_age VARCHAR(2);

ALTER TABLE STUDENT
CHANGE stu_age LIFETIME INT;

ALTER TABLE STUDENT
DROP LIFETIME;

ALTER TABLE STUDENT
RENAME STU; -- IF YOU DONT WRITE TO THEN ALSO IT WORKS FINE

ALTER TABLE STU
RENAME TO STUDENT;

SELECT * FROM STU;

TRUNCATE TABLE STUDENT; -- IT WILL DELETE TABLE'S DATA

-- PRACTICE QUESTION
-- 1)
ALTER TABLE STUDENT
CHANGE NAME FULL_NAME VARCHAR(50);
-- 2)
DELETE FROM STUDENT
WHERE MARKS<80;
-- 3)

ALTER TABLE STUDENT
ADD GRADES INT;
ALTER TABLE STUDENT
DROP GRADES; -- DROP COLUMN GRADE WILL ALSO WORKS

SELECT * FROM STUDENT;



CREATE DATABASE JOINS;
USE JOINS;

CREATE TABLE STUDENT(
	student_id INT PRIMARY KEY,
    name VARCHAR(50)
);

INSERT INTO STUDENT VALUES
(101,"ADAMS"),
(102,"BOB"),
(103,"CASEY");

SELECT * FROM STUDENT;

CREATE TABLE COURSE(
	student_id INT PRIMARY KEY,
    course VARCHAR(50)
);

INSERT INTO COURSE VALUES
(102,"ENGLISH"),
(105,"MATH"),
(103,"SCIENCE"),
(107,"COMPUTER SCIENCE");


SELECT * FROM STUDENT
INNER JOIN COURSE
ON STUDENT.student_id = COURSE.student_id;


SELECT * 
FROM STUDENT AS S
INNER JOIN COURSE AS C
ON S.student_id = C.student_id;

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.student_id = C.student_id;

SELECT * 
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.student_id = C.student_id;

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.student_id = C.student_id
UNION
SELECT * 
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.student_id = C.student_id;

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.student_id = C.student_id
WHERE C.student_id IS NULL;


-- EXCLUSIVE RIGHT JOIN 
SELECT * 
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.student_id = C.student_id
WHERE S.student_id IS NULL;

SELECT * FROM COURSE
RIGHT JOIN STUDENT
ON COURSE.STUDENT_ID = STUDENT.STUDENT_ID
WHERE STUDENT.STUDENT_ID IS NULL;

SELECT * 
FROM STUDENT AS A
JOIN STUDENT AS B
ON A.STUDENT_ID = B.STUDENT_ID;

create table employee(
	id int ,
    name varchar(50),
    manager_id int
);

insert into employee values
(101,"adam",103),
(102,"bob",104),
(103,"casey",null),
(104,"donald",103);

select * from employee;

select a.name as manager_name , b.name
from employee as a
join employee as b
where a.id = b.manager_id;


select *
from employee as a
join employee as b
where a.id = b.manager_id;


-- union

 SELECT NAME FROM EMPLOYEE
 UNION
 SELECT NAME FROM EMPLOYEE;
 
 -- union ALL

 SELECT NAME FROM EMPLOYEE
 UNION ALL
 SELECT NAME FROM EMPLOYEE;
 
 
 use XYZ;
 
 -- INVALID
 SELECT NAME,MARKS
 FROM STUDENT
 WHERE MARKS>AVG(MARKS);
 
 -- VALID
 
 SELECT NAME , MARKS
 FROM STUDENT
 WHERE MARKS >
 (SELECT AVG(MARKS) FROM STUDENT );
 


-- SELECT EVEN ROLLNO

SELECT ROLLNO
FROM STUDENT
WHERE ROLLNO%2=0;

SELECT NAME FROM STUDENT
WHERE ROLLNO IN (102,104,106);

SELECT NAME FROM STUDENT
WHERE ROLLNO IN 
(SELECT ROLLNO
FROM STUDENT
WHERE ROLLNO%2=0);


SELECT MAX(MARKS)
FROM (SELECT * FROM STUDENT WHERE CITY = "DELHI") -- IMP
AS TEMP;


SELECT (SELECT MAX(MARKS) FROM STUDENT) , NAME
FROM STUDENT;

-- VIEW

CREATE VIEW V1 AS 
SELECT NAME,MARKS FROM STUDENT;

SELECT * FROM V1;
DROP VIEW V1;

SELECT * FROM STUDENT;

